#ifndef NAMETABLE_H_INCLUDED #define NAMETABLE_H_INCLUDED  typedef struct TokeExtend { }TokenExtend ; typedef struct TokenInfo { char * name ;  int tokenType ;  int dataType ;  int Addr ;  TokenExtend extend ;  int hasDeclar ;  }TokenInfo ; typedef struct NameTableItem { TokenInfo tokenInfo ;  struct nameTableItem * nxtItem ;  } NameTableItem ; typedef struct NameTable {  struct NameTable * parent ;  struct NameTable * children[CHILD_NUM] ;  int childrenNum ;  NameTableItem * nodeList[NODE_NUM] ;  int nodeNum ;  char * nameString ; }NameTable ; NameTable* getNameTable(NameTable * parent) { NameTable * nameTable = NULL ; int i ; nameTable = (NameTable *)malloc(sizeof(NameTable)) ; nameTable->nameString = (char*)malloc(sizeof(char)*NAME_STRING_LEN) ; for(i = 0 ; i < NODE_NUM ; i++) { nameTable->nodeList[i] = NULL ; } nameTable->parent = parent ; for(i = 0 ; i < CHILD_NUM ; i++) { nameTable->children[i] = NULL ; } for(i = 0 ; i < NAME_STRING_LEN ;i++) { nameTable->nameString[i] = '\0' ; } nameTable->nodeNum = 0 ; nameTable->childrenNum = 0 ; return nameTable ; } NameTableItem * getNameTableItem() { NameTableItem * newItem = (NameTableItem * )malloc(sizeof(NameTableItem)) ; newItem->nxtItem = NULL ; return newItem ; } int _insertIntoNameTable(NameTable * nameTable , NameTableItem ** preItem , char * tokenName) { NameTableItem * newItem = getNameTableItem() ; if(*preItem == NULL) {  (*preItem) = newItem ; } else { (*preItem)->nxtItem = newItem ; } strcpy(nameTable->nameString,tokenName) ; newItem->tokenInfo.name = nameTable->nameString ; newItem->tokenInfo.hasDeclar = FALSE ; nameTable->nameString += strlen(tokenName) ; nameTable->nodeNum ++ ; return (int)newItem ; }   int createAndInsertItem(NameTable * nameTable , char * tokenName ) { int hashCode ; hashCode = getHashCode(tokenName) ;  NameTableItem ** pos = & nameTable->nodeList[hashCode] ; while(*pos != NULL) { if(strcmp(tokenName,(*pos)->tokenInfo.name) == 0) return -1 ; pos = &((*pos)->nxtItem) ; } return _insertIntoNameTable(nameTable,pos,tokenName) ; } #endif 